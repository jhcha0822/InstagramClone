spring:

  security:
    oauth2:
      client:
        # 외부 서비스에서 이 서비스를 특정하기 위해 등록하는 정보 (필수)
        registration:
          google:
            client-name: google
            # 서비스에서 발급 받은 아이디
            client-id: 134067196206-59f6h9lkllqt5u8l7a3bt7qphd9bnicv.apps.googleusercontent.com
            # 서비스에서 발급 받은 비밀번호
            client-secret: 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
            # 서비스에 등록한 로그인 성공 시 redirect uri
            redirect-uri: http://localhost:8080/login/oauth2/code/google
            authorization-grant-type: authorization_code
            scope:
              # 리소스 서버에서 가져올 데이터 범위
              profile, email
        # 서비스별로 정해진 값이 존재하며
        # OAuth2 클라이언트 의존성이 유명한 서비스 ex) 구글, 페이스북, 깃허브 등은 내부적으로 데이터 보유
        provider:
          google:
            # 서비스 로그인 창 주소
            authorization-uri:
            # 토큰 발급 서버 주소
            token-uri:
            # 사용자 정보 획득 주소
            user-info-uri:
            # 응답 데이터 변수
            user-name-attribute:
  h2:
    console:
      enabled: true

  datasource:
    # H2 DB 메모리 상에서 사용
    url: jdbc:h2:mem:instagramclone
    # 접속을 위한 드라이버
    driver-class-name: org.h2.Driver
    # SpringBoot 2.4부터 username 필수
    username: sa
    password:

  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    # create: 객체를 통해 자동 테이블 생성
    # drop: 종료 시 테이블 삭제
    hibernate:
      ddl-auto: create-drop
    properties:
      hibernate:
        format_sql: true
        show_sql: true
    defer-datasource-initialization: true
  
  # 콘솔 확인
  output:
    ansi:
      enabled: always

jwt:
  header: Authorization
  #HS512
  #echo 'instagram-clone-project-spring-boot-jwt-secret-instagram-clone-project-spring-boot-jwt-secret'|base64
  secret: aW5zdGFncmFtLWNsb25lLXByb2plY3Qtc3ByaW5nLWJvb3Qtand0LXNlY3JldC1pbnN0YWdyYW0tY2xvbmUtcHJvamVjdC1zcHJpbmctYm9vdC1qd3Qtc2VjcmV0
  token-validity-in-seconds: 86400

logging:
  level:
    com.project: DEBUG
    # 파라미터 확인
    org.hibernate.type: trace